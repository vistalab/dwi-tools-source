#ifndef TYPEDEFS_EVENT_H
#define TYPEDEFS_EVENT_H

#include "typedefs_quench.h"

/* --------------------------------- Event Handling ---------------------------------- 
 * Event handling in Quench is done by event listener and source idiom.
 * A event source maintains a list of all the listeners for an event. 
 * When the event occurs the event source notifies all the listeners about the event.
 *
 * Events are of two types:
 * Simple events: Like enums
 * Events with data. All the event class implement a GetValue method which retrieves
 * the value associated with the event
 *
 * Events are used to exchange information among GUI elements. The datamodel is mostly
 * oblivious of events and acts like a structure with a few operation
 /* ----------------------------------------------------------------------------------- */

//! List of all events generated by user interaction
enum EVENT
{
	NONE,
	COLOR_MAP_PANEL_SELECTION_CHANGED,
	RANGE_SLIDER_UPDATED,
	SLIDER_UPDATED,
	WINDOW_LEVEL_PANEL_UPDATED,
	BACKGROUND_CHANGED_IN_OVERLAY_ITEM,
	COLOR_MAP_CHANGED,
	
	//!Overlay events
	OVERLAY_ITEM_SELECTED,
	OVERLAY_COLOR_CHANGED,
	OVERLAY_OPACITY_CHANGED,
	OVERLAY_VISIBILITY_CHANGED,
	OVERLAY_RANGE_CHANGED,
	
	//! Pathway events
	PATHWAY_GROUP_VISIBILITY_CHANGED,
	PATHWAY_GROUP_SELECTED,
	PATHWAY_GROUP_ADDED,
	PATHWAY_GROUP_DELETED,
	SELECTION_MODE_CHANGED,
	SELECTION_OPERATION_CHANGED,
	
	//! Filtering events
	FILTER_PATHWAYS_BY_STATS,
	FILTER_PATHWAYS_BY_ROI,
	FILTER_PATHWAYS_BY_GESTURE,
	
	ACCEPT_FILTER_PATHWAYS_BY_STATS,
	DISCARD_FILTER_PATHWAYS_BY_STATS,
	TOGGLE_ASSIGNMENTS_LOCKED,
	UPDATE_SURFACE_MODE_GEOMETRY,
	
	//! ROI based events
	ROI_CREATE_CUBE,
	ROI_CREATE_SPHERE,
	ROI_CREATE_MESH,
	ROI_DELETE,
	ROI_SELECT_BY_NAME,
	ROI_SELECT_BY_ACTOR,
	ROI_NAME_CHANGED,
	ROI_TRANSLATE,
	ROI_SCALE,
	ROI_COLOR,
	ROI_SHOW,
	ROI_SHOW_ALL,
	ROI_SHOW_LABEL,
	ROI_QUERY_OP_CHANGED,
	ROI_EDITED,
	ROI_EDIT_MODE_OFF,
	ROI_EDIT_MODE_ON,
	ROI_DRAW_NEW_ROI,
	MULTI_VALUE_SPINNER_CHANGED,

	TOGGLE_MESH_VISIBILITY,
	TOGGLE_IMAGE_PLANE,

	SHOW_REFINE_SELECTION_PANEL,
	SHOW_ROI_PANEL,
	SHOW_OVERLAY_PANEL,
	SHOW_PERPOINTCOLOR_PANEL,
	HIDE_PERPOINTCOLOR_PANEL,
	
	// Tony added to remove globals
	UPDATE_MESH,
	SET_BACKGROUND,
	UPDATE_BACKGROUND,
	REFRESH_VIZ,

	// Dave added
	UPDATE_VISIBILITY_PANEL
};

//! The base class of all events classes
/*! Usually the events contain just an enum to help identify its type */
class Event
{
public: 
	//!The type of event
	PROPERTY_READONLY(EVENT, _event, EventType);
	Event() { _event = NONE; }
	Event(EVENT e) { _event = e; }
	virtual ~Event(){}
};



//! template class to generate specific events derived from Event
/*! \param T  The data type of the value associated with the event.
 */
template <class T, EVENT event_type> 
class _tEvent : public Event
{
public:
	_tEvent<T,event_type>(T val):Event(event_type){_value = val;}
	PROPERTY_READONLY(T, _value, Value);
};

class MultiValueSpinner;
class vtkActor;

// Events with single values
typedef _tEvent<int,COLOR_MAP_CHANGED> 								EventColorMapChanged;
typedef _tEvent<OverlayItem*,OVERLAY_ITEM_SELECTED> 				EventOverlayItemSelected;
typedef _tEvent<Overlay*,OVERLAY_COLOR_CHANGED> 					EventOverlayColorChanged;
typedef _tEvent<float,OVERLAY_OPACITY_CHANGED> 						EventOverlayOpacityChanged;
typedef _tEvent<bool,OVERLAY_VISIBILITY_CHANGED> 					EventOverlayVisibilityChanged;
typedef _tEvent<int,PATHWAY_GROUP_VISIBILITY_CHANGED> 				EventPathwayGroupVisibilityChanged;
typedef _tEvent<int,PATHWAY_GROUP_SELECTED> 						EventPathwayGroupSelected;
typedef _tEvent<int , SELECTION_MODE_CHANGED> 						EventSelectionModeChanged;
typedef _tEvent<int , SELECTION_OPERATION_CHANGED> 					EventSelectionOperationChanged;
typedef _tEvent<PRAPID_model,FILTER_PATHWAYS_BY_GESTURE>			EventFilterPathwaysByGesture;
typedef _tEvent<int, ROI_DELETE> 									EventROIDelete;
typedef _tEvent<vtkActor*, ROI_SELECT_BY_ACTOR> 					EventROISelectByActor;
typedef _tEvent<std::string, ROI_SELECT_BY_NAME> 					EventROISelectByName;
typedef _tEvent<std::string, ROI_NAME_CHANGED> 						EventROINameChanged;
typedef _tEvent<Vector3d, ROI_TRANSLATE> 							EventROITranslate;
typedef _tEvent<Vector3d, ROI_SCALE> 								EventROIScale;
typedef _tEvent<Colord, ROI_COLOR> 									EventROIColor;
typedef _tEvent<bool, ROI_SHOW> 									EventROIShow;
typedef _tEvent<bool, ROI_SHOW_ALL> 								EventROIShowAll;
typedef _tEvent<bool, ROI_SHOW_LABEL> 								EventROIShowLabel;
typedef _tEvent<int , ROI_QUERY_OP_CHANGED> 						EventROIQueryOpChanged;
typedef _tEvent<MultiValueSpinner*, MULTI_VALUE_SPINNER_CHANGED> 	EventMultiValueSpinnerChanged;
typedef _tEvent<int, SHOW_REFINE_SELECTION_PANEL> 					EventShowRefineSelectionPanel;
typedef _tEvent<int, UPDATE_MESH>									EventUpdateMesh;
typedef _tEvent<int, SET_BACKGROUND>								EventSetBackground;
typedef _tEvent<int, UPDATE_BACKGROUND>								EventUpdateBackground;
typedef _tEvent<bool, REFRESH_VIZ> 									EventRefreshViz;

//! This class contains 2 values
class EventOverlayRangeChanged : public Event
{
public:
	EventOverlayRangeChanged(float min, float max):Event(OVERLAY_RANGE_CHANGED){_min = min; _max = max;}
	PROPERTY_READONLY(float, _min, Min);
	PROPERTY_READONLY(float, _max, Max);
};

//! This class contains 2 values
class EventToggleImagePlane : public Event
{
public:
	EventToggleImagePlane(DTISceneActorID idPlane, bool bVisibility):Event(TOGGLE_IMAGE_PLANE){_idPlane = idPlane; _bVisibility = bVisibility;}
	PROPERTY_READONLY(DTISceneActorID, _idPlane, IDPlane);
	PROPERTY_READONLY(bool, _bVisibility, Visibility);
};

//! This class contains information about the per point color panel
class EventShowPerPointColorPanel: public Event
{
public:
	EventShowPerPointColorPanel(std::string stat_name, int colormap_index, float min, float max):Event(SHOW_PERPOINTCOLOR_PANEL){_min = min; _max = max; _stat_name = stat_name; _color_map_index = colormap_index;}
	PROPERTY_READONLY(std::string, _stat_name, StatisticName);
	PROPERTY_READONLY(int, _color_map_index, ColorMapIndex);
	PROPERTY_READONLY(float, _min, Min);
	PROPERTY_READONLY(float, _max, Max);
};

//! IEventListener is base interface for all listener classes
/*! All derived classes need to implement the OnEvent function.*/
class IEventListener
{
public:
	//! This function is called by all event sources with whom class is registered
	virtual void OnEvent(PEvent evt)=0;
};

//! List of event listeners
typedef std::list<IEventListener* > IListenerList;

//! IEventSource is the base interface for all event generating classes
/*! IEventSource maintains a list of event listeners. It notifies all 
 them when an event occurs.
 */
class IEventSource : public IListenerList
{
public:
	//! Notifies all registered listener about the event stored in \param evt
	void NotifyAllListeners(PEvent evt)
	{
		foreach(IListenerList, iter , (*this))
		(*iter)->OnEvent(evt);
	}
};

#endif
